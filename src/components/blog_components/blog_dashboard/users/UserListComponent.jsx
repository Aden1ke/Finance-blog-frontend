import React, { useState, useEffect, useMemo } from "react";
import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  Chip,
  Tooltip,
  Pagination,
  Input,
  Button,
  Spinner,
  useDisclosure,
} from "@nextui-org/react";
import { Icon } from "@iconify/react";
import { useDispatch, useSelector } from "react-redux";
import {
  fetchUsers,
  updateUserRole,
  deleteUser,
  removeUser,
  updateUserInList,
  startManualRefresh,
  selectUserList,
  selectIsUserListLoading,
  selectIsUserListError,
  selectUserListErrorMessage,
  selectIsUserListFetched,
} from "../../../../app/features/user/userListSlice";
import { fetchTeamMembers } from "../../../../app/features/user/teamSlice";
import { logoutUser } from "../../../../app/features/user/userSlice";
import DeleteUserModal from "../../../modals/DeleteUserModal";
import ChangeRoleModal from "../../../modals/ChangeRoleModal";
import { useFeedback } from "../../../../context/FeedbackContext";

// MongoDB ObjectId validation helper function
const isValidObjectId = (id) => {
  return id && /^[0-9a-fA-F]{24}$/.test(id);
};

const UserListComponent = () => {
  console.log("UserListComponent render edildi");

  const dispatch = useDispatch();

  // Redux state'lerini selektÃ¶rlerle Ã§ek
  const userList = useSelector(selectUserList);
  const isLoading = useSelector(selectIsUserListLoading);
  const isError = useSelector(selectIsUserListError);
  const errorMessage = useSelector(selectUserListErrorMessage);
  const isFetched = useSelector(selectIsUserListFetched);

  // Feedback context'i kullan
  const { success, error: showError } = useFeedback();

  // UI state'leri
  const [searchTerm, setSearchTerm] = useState("");
  const [page, setPage] = useState(1);

  // Modal yÃ¶netimi
  const { isOpen, onOpen, onClose } = useDisclosure();
  const [deleteError, setDeleteError] = useState(null);
  const [deleteLoading, setDeleteLoading] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);

  // Rol deÄŸiÅŸtirme modal
  const [roleModalOpen, setRoleModalOpen] = useState(false);
  const [selectedRole, setSelectedRole] = useState("");
  const [roleUpdateLoading, setRoleUpdateLoading] = useState(false);
  const [roleUpdateError, setRoleUpdateError] = useState(null);

  // Tek bir useEffect ile veri yÃ¼kleme
  useEffect(() => {
    // Veri daha Ã¶nce yÃ¼klenmediyse, yÃ¼kle
    if (!isFetched && !isLoading) {
      console.log("ðŸš€ KullanÄ±cÄ± listesi ilk kez yÃ¼kleniyor...");
      dispatch(fetchUsers());
    }
  }, [dispatch, isFetched, isLoading]);

  // Hata durumunda bildirim gÃ¶ster
  useEffect(() => {
    if (errorMessage) {
      showError(errorMessage);
    }
  }, [errorMessage, showError]);

  // deleteError durumunda bildirim gÃ¶ster
  useEffect(() => {
    if (deleteError) {
      showError(deleteError);
    }
  }, [deleteError, showError]);

  // roleUpdateError durumunda bildirim gÃ¶ster
  useEffect(() => {
    if (roleUpdateError) {
      showError(roleUpdateError);
    }
  }, [roleUpdateError, showError]);

  // Tabloda gÃ¶rÃ¼ntÃ¼lenecek satÄ±r sayÄ±sÄ±
  const rowsPerPage = 10;

  // FiltrelenmiÅŸ kullanÄ±cÄ±lar (arama iÃ§in)
  const filteredUsers = useMemo(() => {
    if (!userList) {
      return [];
    }

    if (!searchTerm || searchTerm.trim() === "") {
      return userList;
    }

    return userList.filter(
      (user) =>
        user.userName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.role?.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [userList, searchTerm]);

  // SayfalanmÄ±ÅŸ sonuÃ§lar
  const pages = Math.ceil((filteredUsers?.length || 0) / rowsPerPage);
  const items = useMemo(() => {
    if (!filteredUsers) return [];
    const start = (page - 1) * rowsPerPage;
    return filteredUsers.slice(start, start + rowsPerPage);
  }, [page, filteredUsers, rowsPerPage]);

  // Arama
  const handleSearch = (e) => {
    setSearchTerm(e.target.value);
    setPage(1);
  };

  // KullanÄ±cÄ± silme
  const openDeleteModal = (user) => {
    setSelectedUser(user);
    setDeleteError(null);
    onOpen();
  };

  const handleDeleteUser = async () => {
    if (!selectedUser) return;
    setDeleteLoading(true);
    setDeleteError(null);

    try {
      // KullanÄ±cÄ± ID'sinin geÃ§erliliÄŸini kontrol et
      if (!selectedUser._id || !isValidObjectId(selectedUser._id)) {
        throw new Error("GeÃ§ersiz kullanÄ±cÄ± ID'si");
      }

      // Redux action ile kullanÄ±cÄ±yÄ± sil
      const result = await dispatch(
        deleteUser({ userId: selectedUser._id })
      ).unwrap();

      // Silinen kullanÄ±cÄ±, oturum aÃ§mÄ±ÅŸ kullanÄ±cÄ± mÄ± kontrol et
      if (result.data && result.data.isCurrentUser) {
        onClose();
        success("HesabÄ±nÄ±z silindi, Ã§Ä±kÄ±ÅŸ yapÄ±lÄ±yor...");

        // KullanÄ±cÄ±ya bildirim gÃ¶stermek iÃ§in kÄ±sa bir bekleme sÃ¼resi
        setTimeout(() => {
          // TÃ¼m kullanÄ±cÄ± oturumunu temizle
          dispatch(logoutUser());
          // Login sayfasÄ±na yÃ¶nlendir
          window.location.href = "/login";
        }, 2000);
      } else {
        success(`${result.data?.userName || "KullanÄ±cÄ±"} baÅŸarÄ±yla silindi`);
        // Modal'Ä± kapat
        onClose();

        // KullanÄ±cÄ±yÄ± UI'dan kaldÄ±r (fetchUsers() Ã§aÄŸÄ±rmak yerine)
        if (userList) {
          // Redux store'dan silinen kullanÄ±cÄ±yÄ± kaldÄ±r
          dispatch(removeUser(selectedUser._id));
        }
      }
    } catch (err) {
      const errorMessage =
        err.message || "KullanÄ±cÄ± silinirken bir hata oluÅŸtu";
      setDeleteError(errorMessage);
      showError(errorMessage);
    } finally {
      setDeleteLoading(false);
    }
  };

  // Rol deÄŸiÅŸtirme
  const openRoleModal = (user) => {
    setSelectedUser(user);
    setSelectedRole(user.role || "user");
    setRoleModalOpen(true);
    setRoleUpdateError(null);
  };

  const handleUpdateRole = async () => {
    if (!selectedUser || !selectedRole) return;
    setRoleUpdateLoading(true);

    try {
      // Redux action ile kullanÄ±cÄ± rolÃ¼nÃ¼ gÃ¼ncelle
      const result = await dispatch(
        updateUserRole({
          userId: selectedUser._id,
          role: selectedRole,
        })
      ).unwrap();

      // Modal'Ä± kapat
      setRoleModalOpen(false);
      success(
        `${selectedUser.userName} kullanÄ±cÄ±sÄ±nÄ±n rolÃ¼ "${selectedRole}" olarak gÃ¼ncellendi.`
      );

      // UI'daki kullanÄ±cÄ± veriyi gÃ¼ncelle (fetchUsers() Ã§aÄŸÄ±rmak yerine)
      if (userList) {
        // Redux store'daki kullanÄ±cÄ±nÄ±n rolÃ¼nÃ¼ gÃ¼ncelle
        dispatch(
          updateUserInList({
            userId: selectedUser._id,
            updates: { role: selectedRole },
          })
        );
      }
    } catch (err) {
      const errorMessage =
        err.message || "KullanÄ±cÄ± rolÃ¼ gÃ¼ncellenirken bir hata oluÅŸtu";
      setRoleUpdateError(errorMessage);
      showError(errorMessage);
    } finally {
      setRoleUpdateLoading(false);
    }
  };

  // KullanÄ±cÄ± listesini yenile - kullanÄ±cÄ± aÃ§Ä±kÃ§a yenileme istediÄŸinde
  const handleRefreshUsers = async () => {
    try {
      console.log(
        "UserListComponent manuel kullanÄ±cÄ± listesi yenileme baÅŸlatÄ±ldÄ±"
      );

      // Ã–nce userSlice'Ä±n isLoading durumunu true'ya ayarla
      dispatch(startManualRefresh());

      // Ä°ki action'Ä± da Ã§aÄŸÄ±r ama sonuÃ§larÄ±nÄ± bekle
      const results = await Promise.all([
        dispatch(fetchUsers()).unwrap(),
        dispatch(fetchTeamMembers()).unwrap(),
      ]);

      // fetchUsers sonucu kontrolÃ¼
      const userResult = results[0];
      if (userResult && userResult.success) {
        console.log(
          `UserListComponent kullanÄ±cÄ± listesi yenilendi: ${
            userResult.data?.length || 0
          } kullanÄ±cÄ±`
        );
        success("KullanÄ±cÄ± listesi baÅŸarÄ±yla yenilendi.");
      } else {
        showError("KullanÄ±cÄ± listesi yenilenirken bir sorun oluÅŸtu.");
        console.error(
          "UserListComponent kullanÄ±cÄ± listesi yenileme yanÄ±tÄ±:",
          userResult
        );
      }
    } catch (err) {
      console.error(
        "UserListComponent kullanÄ±cÄ± listesi yenileme hatasÄ±:",
        err
      );
      showError(
        "KullanÄ±cÄ± listesi yenilenirken bir hata oluÅŸtu: " +
          (err.message || "Bilinmeyen hata")
      );
    }
  };

  // Basit renk tanÄ±mÄ±
  const renderRole = (role) => {
    let bgColorClass = "bg-primary-500";
    let textColorClass = "text-white";

    if (role?.toLowerCase() === "admin") {
      bgColorClass = "bg-red-500";
      textColorClass = "text-white";
    }
    if (role?.toLowerCase() === "author") {
      bgColorClass = "bg-yellow-500";
      textColorClass = "text-black";
    }

    return (
      <Chip
        size="sm"
        variant="flat"
        className={`${bgColorClass} ${textColorClass}`}
      >
        {role || "User"}
      </Chip>
    );
  };

  const renderStatus = (isVerified) => {
    const bgColorClass = isVerified ? "bg-green-500" : "bg-gray-300";
    const textColorClass = isVerified ? "text-white" : "text-gray-700";

    return (
      <Chip
        size="sm"
        variant="flat"
        className={`${bgColorClass} ${textColorClass}`}
      >
        {isVerified ? "Verified" : "Not Verified"}
      </Chip>
    );
  };

  const renderActiveStatus = (isActive) => {
    const bgColorClass = isActive ? "bg-green-500" : "bg-red-500";
    const textColorClass = "text-white";

    return (
      <Chip
        size="sm"
        variant="flat"
        className={`${bgColorClass} ${textColorClass}`}
      >
        {isActive ? "Active" : "Passive"}
      </Chip>
    );
  };

  // Aksiyon butonlarÄ±
  const renderActions = (user) => (
    <div className="flex gap-2">
      <Tooltip content="Change Role">
        <Button
          isIconOnly
          size="sm"
          variant="light"
          className="text-yellow-500 hover:bg-yellow-100"
          onPress={() => openRoleModal(user)}
        >
          <Icon icon="mdi:account-convert" />
        </Button>
      </Tooltip>
      <Tooltip content="Delete User">
        <Button
          isIconOnly
          size="sm"
          variant="light"
          className="text-red-500 hover:bg-red-100"
          onPress={() => openDeleteModal(user)}
        >
          <Icon icon="mdi:delete" />
        </Button>
      </Tooltip>
    </div>
  );

  // YÃ¼kleniyor
  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-64">
        <Spinner size="lg" label="KullanÄ±cÄ±lar yÃ¼kleniyor..." />
      </div>
    );
  }

  // Hata
  if (isError) {
    return (
      <div className="flex justify-center items-center h-64 text-red-500">
        <p>Hata: {errorMessage}</p>
      </div>
    );
  }

  // AsÄ±l render
  return (
    <div className="w-full flex flex-col gap-4 overflow-hidden">
      {/* Ãœst kÄ±sÄ±m */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-3 sm:gap-2 w-full overflow-hidden">
        <h1 className="text-2xl font-bold whitespace-nowrap">
          KullanÄ±cÄ± Listesi
        </h1>
        <div className="flex w-full sm:w-auto items-center justify-end gap-2">
          <Input
            placeholder="KullanÄ±cÄ± ara..."
            value={searchTerm}
            onChange={handleSearch}
            startContent={<Icon icon="mdi:magnify" />}
            className="w-full max-w-full sm:max-w-xs"
            size="sm"
          />
          <Tooltip content="Yenile">
            <Button
              isIconOnly
              className="bg-gray-100 text-gray-700 hover:bg-gray-200"
              size="sm"
              onPress={handleRefreshUsers}
              aria-label="Yenile"
            >
              <Icon icon="mdi:refresh" className="text-lg" />
            </Button>
          </Tooltip>
        </div>
      </div>

      {/* Tablo */}
      <div className="w-full overflow-x-auto">
        <Table
          aria-label="KullanÄ±cÄ± listesi"
          classNames={{
            base: "max-w-full",
            table: "min-w-full",
          }}
          bottomContent={
            pages > 0 && (
              <div className="flex w-full justify-center">
                <Pagination
                  isCompact
                  showControls
                  showShadow
                  className="text-primary-500"
                  page={page}
                  total={pages}
                  onChange={(p) => setPage(p)}
                />
              </div>
            )
          }
        >
          <TableHeader>
            <TableColumn className="w-[130px]">KULLANICI ADI</TableColumn>
            <TableColumn className="w-[180px]">E-POSTA</TableColumn>
            <TableColumn className="w-[70px]">ROL</TableColumn>
            <TableColumn className="w-[80px]">DURUM</TableColumn>
            <TableColumn className="w-[80px]">AKTÄ°F</TableColumn>
            <TableColumn className="w-[100px]">SON GÄ°RÄ°Åž</TableColumn>
            <TableColumn className="w-[100px]">KAYIT TARÄ°HÄ°</TableColumn>
            <TableColumn className="w-[100px]">SÄ°LÄ°NME TARÄ°HÄ°</TableColumn>
            <TableColumn className="w-[70px]">Ä°ÅžLEMLER</TableColumn>
          </TableHeader>
          <TableBody items={items} emptyContent={"KullanÄ±cÄ± bulunamadÄ±."}>
            {(item) => (
              <TableRow key={item._id}>
                <TableCell className="truncate max-w-[130px]">
                  {item.userName}
                </TableCell>
                <TableCell className="truncate max-w-[180px]">
                  {item.email}
                </TableCell>
                <TableCell>{renderRole(item.role)}</TableCell>
                <TableCell>{renderStatus(item.isVerified)}</TableCell>
                <TableCell>{renderActiveStatus(item.isActive)}</TableCell>
                <TableCell className="truncate max-w-[100px]">
                  {item.lastLogin
                    ? new Date(item.lastLogin).toLocaleDateString("tr-TR")
                    : "-"}
                </TableCell>
                <TableCell className="truncate max-w-[100px]">
                  {new Date(item.createdAt).toLocaleDateString("tr-TR")}
                </TableCell>
                <TableCell className="truncate max-w-[100px]">
                  {item.deletedAt
                    ? new Date(item.deletedAt).toLocaleDateString("tr-TR")
                    : "-"}
                </TableCell>
                <TableCell>{renderActions(item)}</TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>

      {/* Modallar */}
      <DeleteUserModal
        isOpen={isOpen}
        onClose={onClose}
        selectedUser={selectedUser}
        deleteError={deleteError}
        handleDeleteUser={handleDeleteUser}
        isLoading={deleteLoading}
      />
      <ChangeRoleModal
        roleModalOpen={roleModalOpen}
        onClose={() => setRoleModalOpen(false)}
        selectedUser={selectedUser}
        selectedRole={selectedRole}
        setSelectedRole={setSelectedRole}
        handleUpdateRole={handleUpdateRole}
        roleUpdateLoading={roleUpdateLoading}
        roleUpdateError={roleUpdateError}
      />
    </div>
  );
};

export default React.memo(UserListComponent);
